#+OPTIONS: num:nil

* Routing in Google Cloud Run
A friend of mine uses an open source routing service to schedule pickup of physical goods in
Illinois. This guide shows how to set up a Vroom Server with the Openroute Service on Google Cloud
Platform running in Cloud Run. 

** Overview

OpenRoute Service and the Vehicle Routing Open-source Optimization Machine (Vroom) can be used in
combination to solve capacity routing problems effectively. Here's a summary of how they can be
applied:

- Data Input:
  - Input your geographic data into OpenRoute Service, including the locations to be visited,
    their coordinates, and any relevant details such as delivery windows.
    
- Geocoding (OpenRoute Service):
  - Use OpenRoute Service to geocode addresses and convert them into geographic coordinates if
    necessary.
    
-  Route Planning (OpenRoute Service):
  - Utilize OpenRoute Service to calculate initial routes for your vehicles based on distance,
    travel times, or other criteria.
  
-  Data Transfer:
  - Transfer the calculated routes and relevant data from OpenRoute Service to Vroom.
    
-  Capacity Constraints (Vroom):
  - In Vroom, define and enforce capacity constraints for each vehicle. Specify the maximum
    load each vehicle can carry in terms of items, weight, or volume.
  
-  Optimization (Vroom):
  - Vroom will optimize the routes generated by OpenRoute Service by considering the capacity
    constraints. It will rearrange stops and assignments to ensure that the capacity of each vehicle
    is not exceeded.
  
-  Output:
  - Obtain the optimized routes and schedules from Vroom, which will provide solutions that
    meet capacity constraints while minimizing transportation costs.
  
-  Implementation:
  - Implement the optimized routes into your transportation operations, ensuring that each
    vehicle follows the recommended schedule while respecting capacity limitations.

By combining OpenRoute Service for initial route planning and geographic data processing with Vroom
for capacity-constrained optimization, you can efficiently solve capacity routing problems, ensuring
that vehicles stay within their designated capacity limits while serving the required locations in
the most cost-effective and efficient manner. This integrated approach helps businesses streamline
their logistics and transportation operations. 

*** Vroom
The Vehicle Routing Open-source Optimization Machine (Vroom) is an open-source software tool
designed for optimizing vehicle routing and scheduling. It helps organizations efficiently plan and
manage the routes of their vehicles, such as delivery trucks or service vehicles. Vroom is used to
minimize transportation costs and time while satisfying various constraints, including delivery
windows, vehicle capacity, and other logistical factors. This open-source tool provides a platform
for optimizing complex routing problems, making it a valuable resource for businesses and
researchers in the field of logistics and transportation management. 

*** OpenRoute Service
OpenRoute Service is an open-source routing and optimization service that offers various
functionalities related to geographic information systems (GIS). It provides capabilities such as
route planning, geocoding, isochrone and isodistance calculations, and more. Users can utilize this
service to find optimal routes for vehicles, pedestrians, or cyclists, geocode addresses to obtain
geographic coordinates, and determine areas accessible within specific time or distance limits.
OpenRoute Service is a valuable tool for developers, businesses, and individuals looking to
incorporate location-based features and route planning into their applications or services. 

** Configuration

calculates optimal collection




# Configuration
## Container Image
- openrouteservice/openrouteservice:v7.1.0

Store files in local directory 


# Infrastructure
Here is a Terraform:





# Performance Tuning

## Latency

Cloud Run Options

- resources
- cpu boost
- always allocated cpu
```
resources {
	  limits = {
	    cpu = "2000m"
	    memory = "2Gi" 
	  }
	}
```

``` default 1 cpu no boost, 2 Gi Mem, idle-cpu-throttle
Time (mean ± σ):      82.2 ms ±   7.8 ms    [User: 20.3 ms, System: 9.1 ms]
Range (min … max):    72.5 ms … 102.2 ms    33 runs
```
cold 56s (single shot)

#### cpu boost
```
  Time (mean ± σ):      81.6 ms ±   8.1 ms    [User: 12.1 ms, System: 11.8 ms]
  Range (min … max):    72.6 ms … 102.3 ms    31 runs
```

```

Idle-cpu-throttle
```
  Time (mean ± σ):      87.2 ms ±  29.4 ms    [User: 16.1 ms, System: 9.5 ms]
  Range (min … max):    66.6 ms … 220.9 ms    29 runs


  Time (mean ± σ):      75.7 ms ±   6.3 ms    [User: 14.2 ms, System: 9.6 ms]
  Range (min … max):    67.0 ms … 100.8 ms    29 runs

  Time (mean ± σ):      79.5 ms ±   4.1 ms    [User: 16.3 ms, System: 7.1 ms]
  Range (min … max):    71.9 ms …  89.5 ms    39 runs

 
```
cold start time:
56-64s 

#### cpu 4 mem 8, cpu boost

  Time (mean ± σ):      84.8 ms ±  22.1 ms    [User: 15.6 ms, System: 8.5 ms]
  Range (min … max):    72.8 ms … 195.7 ms    29 runs

cold start:

40.343s

Idle:
  Time (mean ± σ):      78.5 ms ±   9.4 ms    [User: 15.3 ms, System: 9.1 ms]
  Range (min … max):    67.0 ms … 121.6 ms    33 runs

#### cpu 1 mem 2, cpu boost

End
-XX:ParallelGCThreads=1 -Xms2g -Xmx2g
Cold Start: `52.834s`

  Time (mean ± σ):      83.3 ms ±   5.7 ms    [User: 15.4 ms, System: 10.7 ms]
  Range (min … max):    72.0 ms … 101.5 ms    37 runs
